[
{
	"uri": "//localhost:1313/3-remediate/3.1/",
	"title": "Apply Foundational Protection with AWS Managed Rules",
	"tags": [],
	"description": "",
	"content": "Scenario Your security team has ranked protection against common attacks, such as Cross-Site Scripting (XSS), path traversal, and SQL injection (SQLi) as a high priority. Your task is to use AWS WAF to reduce the risk of these common web application attacks against your website. Your organization would prefer a fully managed solution that does not require manual creation of rules.\nInstructions Review the Web ACL that is already configured for your web application. Add the Core rule set and SQL database managed rule groups to the WebACL. The Core rule set (CRS) rule group contains rules that are generally applicable to web applications. This provides protection against exploitation of a wide range of vulnerabilities, including high risk and commonly occurring vulnerabilities described in OWASP publications such as OWASP Top 10. The SQL database rule group contains rules to block request patterns associated with exploitation of SQL databases, like SQL injection attacks. Review the AWS WAF documentation for more details on rules included in the Core rule set and the SQL database rule group.\nAfter implementing the Core rule set and the SQL Database rule group, test your protections using both manual and automated scans. Use the manual scanner, or check the WAF Dashboard for automated scans.\nProcedure Add managed rules to the WAF ACL Navigate to the WAF ACL and its Rules tab:\nOpen the AWS WAF Console.\nVerify that you are using the Global (CloudFront) region\nOpen the WebACL called waf-workshop-webacl\nSelect the Rules tab\nAdd the Core rule set and the SQL database managed rule groups:\nClick on Add Rules and select Add managed rule groups Expand AWS managed rule groups\nClick on the switch for the Core rule set (changes color to blue)\nClick on the switch for the SQL database (changes color to blue) Click on Add rules on the bottom of the page\nOn the Set rule priority page, click on Save\nOn the Rules tab, verify that AWS Managed Common and SQLi Rule Sets are both present\nYou have added two managed rule sets to the WebACL. You are now ready to test them.\nEvaluate protection effectiveness Follow the instructions to manually test protections from the Evaluate section to validate that SQL injection, Cross-site scripting (XSS) and Path traversal tests are passing. Review the progress dashboard and verify that automated scans for tests listed above are passing. Congratulations! You have successfully used Core rule set and SQL database rule set to apply foundational protections against web application attacks!\n"
},
{
	"uri": "//localhost:1313/5-optional/5.1/",
	"title": "Create a CloudWatch Alarm for an AWS WAF Metric",
	"tags": [],
	"description": "",
	"content": "Scenario Your organization is concerned about partner\u0026rsquo;s use of web crawlers and the crawlers ability to stay under rate-limiting rules. Your task is to setup an alerting system that will notify you if their use of a PHP crawler is exceeding an agreed threshold.\nInstructions First, create an SNS topic without any subscribers (no need to setup email notification). Create a CloudWatch alarm that tracks the phpcrawl-rate-limiter rule and is triggered if any requests are blocked in any 1-minute period.\nVerify your configuration by triggering rate limiting. The script\u0026rsquo;s excessive request should trigger the alarm (change the alarm state).\nProcedure Create an SNS topic Note: You may see an error message referencing KMS permissions. You can safely ignore it as we do not use at-rest encryption features of SNS in this lab.\nNavigate to Simple Notification Service (SNS) in the AWS console\nUnder Create topic, enter the name waf-alerts, then click on Next step\nUnder Details, enter the following:\nType: Standard Name: waf-alerts (should be pre-populated) Scroll down and click on Create topic Create a CloudWatch alarm Navigate to CloudWatch service in the AWS Console\nNavigate to Alarms, All alarms\nClick on Create alarm\nIn the \u0026ldquo;Create alarm\u0026rdquo;, click on Select metric 5. Navigate to WAFV2, Region, Rule, WebACL\nSelect this metric: Rule: rate-limiter Metric Name: BlockedRequests Click on Select metric In the next page, change Period down to 1 minute Under \u0026ldquo;Conditions\u0026rdquo;, change than\u0026hellip; field to 0, click Next Under Notification, click Add Notification and use the following values: Alarm state trigger: In alarm Select Select an existing topic Send a notification to\u0026hellip;: waf-alerts Accept default values, scroll down and click on Next Under Name and description enter crawler-alarm as alarm name and click Next On the Preview and create page, click on Create alarm Verify the alarm configuration This procedure will create a large number of requests to trigger the rate-limiting WAF rule, which in turn will publish metrics to CloudWatch. The increase in the CloudWatch metric should trigger the alarm.\nTrigger the alarm\nGo to the Event Outputs, and use the link called Trigger Rate Limiting The script will simulate an excessive number of requests to your test site, simulating the automated traffic Initially, requests will result in 200 OK responses When the rate-limiting rule is triggerred, requests will be blocked and result in 429 Too Many Requests responses Verify in CloudWatch\nIt may take several minutes for the CloudWatch Alarms to get from \u0026ldquo;Insufficient data\u0026rdquo; state into \u0026ldquo;In Alarm\u0026rdquo; state.\nNavigate to CloudWatch service in the AWS Console\nClick on In alarm to view triggerred alarms\nYou should see the alarm you just created (Note: it may take 1-2 minutes for the transition to in-alarm state)\nClick on phpcrawl-alarm to get more details with a chart\nCongratulations! Your AWS WAF rule monitoring alarm has been successfully created. This ensures you\u0026rsquo;ll be notified whenever the rule is triggered.\n"
},
{
	"uri": "//localhost:1313/1-introduction/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduce AWS WAF AWS WAF(AWS Web Application Firewall) is a web application firewall service. It helps protect your web applications or APIs against common web exploits that may affect availability, compromise security, or consume excessive resources.\nUsing a WAF is a great way to add defense in depth to your web application. A WAF can help mitigate the risk of vulnerabilities such as SQL Injection, Cross Site Scripting and other common attacks (which listed in Top 10 OWASP). WAF allows you to create your own custom rules to decide whether to block or allow HTTP requests before they reach your application.\n"
},
{
	"uri": "//localhost:1313/4-monitor/4.1/",
	"title": "Investigate AWS WAF Logs",
	"tags": [],
	"description": "",
	"content": "Scenario We previously explored how AWS WAF provides CloudWatch metrics for monitoring and setting alerts, but for troubleshooting specific issues, we often need to go beyond those metrics and examine the raw data. AWS WAF logs provide detailed information about every request processed by your Web ACL. This section will guide you through how to leverage these logs for in-depth investigations.\nInstructions Use Amazon Athena to explore AWS WAF logs. Note that AWS WAF logging has been configured for you and Amazon Athena table waf_access_logs pointed to logs located in S3. First task is to determine what are the most common HTTP headers in the requests. Next, find which rules are blocking the most requests and on which URI paths. Identify rules that are blocking access to the API located at /api/listproducts.php. Finally, find out which URI paths are blocked by the Core Rule Set and by the path-blocking custom WAF rules you created earlier.\nThere are no verification steps in this exercise.\nProcedure Investigate AWS WAF Logs with Amazon Athena Queries This workshop comes preconfigured with an AWS Glue database, Amazon Athena workgroup and Athena queries. This section will walk you through switching to the correct Amazon Athena workgroup and accessing the queries.\nOpen Amazon Athena in the AWS Console: https://console.aws.amazon.com/athena\nIn the workgroup dropdown, select the waf-workshop workgroup name\n3. If presented with the settings popup, click on Acknowledge 4. Go to the Saved queries tab\nClick the row to open the Saved Query called MostPopularHttpHeaders Run the query After running the query and fail, if you meet error” TABLE_NOT_FOUND: line 1:37: Table \u0026lsquo;awsdatacatalog.default.waf_access_logs\u0026rsquo; does not exist”. Make sure the database name is glueaccesslogsdatabase-* that has a table named “waf_access_logs” This query helps us understand what HTTP Headers are being passed and how frequently each one is used. Expect to see different values in your results, as they depend on how many requests were sent and logged.\nInvestigate blocking rules One of the common tasks for WAF administrators is to understand the impact that WAF rules have on specific parts of your site. You will now enter your own custom query to determine which WAF rules are blocking requests and to which specific URI paths.\nClick on the + symbol to start a new Amazon Athena query\nCopy the following query and paste it into the new query window:\nSELECT COUNT(*) AS count, terminatingruleid, httprequest.clientip, httprequest.uri FROM waf_access_logs WHERE action=\u0026#39;BLOCK\u0026#39; GROUP BY terminatingruleid, httprequest.clientip, httprequest.uri ORDER BY count DESC LIMIT 100 Modify the query above to find out which rules are blocking requests to the API located at /api/listproducts.php. Try to modify the SQL query on your own first, and if you need help, expand the section below for a query hint. Query Hint\nSELECT COUNT(*) AS count, terminatingruleid, httprequest.clientip, httprequest.uri FROM waf_access_logs WHERE action=\u0026#39;BLOCK\u0026#39; AND httprequest.uri = \u0026#39;/api/listproducts.php\u0026#39; GROUP BY terminatingruleid, httprequest.clientip, httprequest.uri ORDER BY count DESC LIMIT 100 Find how often and what a rule blocked access Run the following query to identify requests that were blocked by the Common Rule Set SELECT COUNT(*) AS count, action, httprequest.clientip, httprequest.uri FROM waf_access_logs WHERE terminatingruleid=\u0026#39;AWS-AWSManagedRulesCommonRuleSet\u0026#39; GROUP BY action, httprequest.clientip, httprequest.uri ORDER BY count DESC LIMIT 100 Modify this query to find out which requests were blocked by the path-blocking rule protecting the /includes directory (the custom rule you created in the remediate phase). Try to modify the SQL query on your own, and if you need help, expand the section below for a query hint. Query Hint\nSELECT COUNT(*) AS count, terminatingruleid, action, httprequest.clientip, httprequest.uri FROM waf_access_logs WHERE action=\u0026#39;BLOCK\u0026#39; AND httprequest.uri LIKE \u0026#39;/includes/%\u0026#39; GROUP BY action, httprequest.clientip, httprequest.uri, terminatingruleid ORDER BY count DESC LIMIT 100 Congratulations! You have successfully explored AWS WAF log data for more details on blocked requests.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Strengthen your web application defenses with AWS WAF",
	"tags": [],
	"description": "",
	"content": "Strengthen your web application defenses with AWS WAF Welcome! This workshop provides you with the knowledge and skills to strengthen your web application defenses with AWS WAF. You\u0026rsquo;ll gain hands-on experience building an effective set of controls around your web application by learning to:\nMitigate common threats: Understand and implement controls to counter frequent web attacks like SQL injection and cross-site scripting. Leverage advanced techniques: Explore advanced capabilities, including Bot Control, custom HTTP responses, and JSON inspection. Monitor web traffic: Analyze traffic by learning how to use AWS WAF logs, build near-real time dashboards and gain insights to further optimize your security posture. About the workshop This is a 300-level workshop aimed at IT professionals who are already familiar with core AWS services, and are looking to better understand AWS WAF and its capabilities.\nThe expected workshop duration is approximately 2 hours.\nModules This workshop is broken up into setup and then four modules:\nIntroduction Preparation Remediate Monitor Optional Clean Up "
},
{
	"uri": "//localhost:1313/4-monitor/4.2/",
	"title": "Block Mystery Test",
	"tags": [],
	"description": "",
	"content": "Scenario Some requests from the automated scanner included the mystery-hint header. Your task to find the value of that header, decode it, and block future requests with the same value.\nInstructions Use Amazon Athena to explore AWS WAF logs and find the value of the mystery-hint header in requests. The value is base64 encoded, so you need to decode the text to find the value. Build a custom WAF rule to block the mystery-hint header value with the appropriate statement (consider text transformation that may be required).\nValidate your rule by reviewing the automated test dashboard that MysteryTest automated scan is passing. If you have completed remediate tasks, then completing this exercise will turn the last tile on the WAF Dashboard My Progress tab to green!\nProcedure Switch to Amazon Athena Workgroup You can skip this section if you are already logged into Amazon Athena console and have switched to the waf-workshop workgroup.\nSwitch to waf-workshop Athena workgroup\nNavigate to the Amazon Athena Console\nIn the workgroup dropdown, select the waf-workshop workgroup name\nIf presented with the settings popup, click on Acknowledge\nFind the value of the Mystery Hint Use an Amazon Athena query to parse AWS WAF logs and find the value of the mystery-hint header.\nOpen the Saved queries tab and click on the MysteryHintHeader query. Run the query to retrieve the encoded value of the header. Note the Base64 encoded value of the mystery-hint header 3. You can use any method to decode the value; if you need help, the steps in the next section show you how to use Amazon Athena\u0026rsquo;s built in functions to perform decoding. In this step, use https://www.base64decode.org/, receive the decoded form of the value\nDecode the value of the Mystery Hint To decode the header value, the following query uses the from_base64() and from_utf8() Athena functions. You can read more about supported functions in the Athena User Guide.\nClick on the + symbol to start a new Amazon Athena query\nRewrite the previously used Saved query MysteryHintHeader by copying it over to a new Query with additional lookup of the decoded value of the mystery-hint header:\nfrom_utf8(from_base64(\u0026#39;\u0026lt;encoded value\u0026gt;\u0026#39;)) If you need help with the query, please find the hint below:\nQuery Hint\nWITH DATASET AS (SELECT header FROM waf_access_logs CROSS JOIN UNNEST(httprequest.headers) AS t(header)) SELECT DISTINCT header.name, header.value as encoded_header_value, from_utf8(from_base64(header.value)) as decoded_header_value FROM DATASET WHERE LOWER(header.name)=\u0026#39;mystery-hint\u0026#39; Run the query to retrieve the header value 4. Save the decoded value for later - you will leverage that in the next section to create a blocking rule\nBlock the Mystery Test Using what you have learned in the previous exercises, build a custom WAF rule to block the MysteryHint header value with the appropriate statement. Think about:\nWhich part of the request should you inspect? Which Match type condition should you specify? Which Text transformation should you use? Try to create the custom WAF rule on your own if you need help, expand the section below for a hint Blocking the Mystery Test\nIn the “Set rule priority” section, choose Save.\nValidate your Mystery Test block Review the workshop dashboard and verify that MysteryTest and all other automated tests are passing. Refer to the Evaluate section for instructions. Note that there is no manual scan built for this test.\nCongratulations! You have successfully explored AWS WAF log data and blocked the Mystery Test.\n"
},
{
	"uri": "//localhost:1313/2-preparation/",
	"title": "Preparation",
	"tags": [],
	"description": "",
	"content": "Download and execute the setup script We will download file containing the workshop\u0026rsquo;s resources, the CloudFormation template used to provision them, and the setup script. We will then run the script to deploy the workshop in your own AWS account.\nCreate a directory named \u0026ldquo;waf-workshop\u0026rdquo;.\nRun the following code (you can copy and paste all commands together):\n# Download workshop assets curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/assets/automated-scanner.zip\u0026#39; --output automated-scanner.zip curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/assets/manual-scanner.zip\u0026#39; --output manual-scanner.zip curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/assets/rate-limit-trigger.zip\u0026#39; --output rate-limit-trigger.zip curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/assets/sample-static-website.html\u0026#39; --output sample-static-website.html curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/assets/scanning-dashboard.html\u0026#39; --output scanning-dashboard.html # Download CloudFormation template and the setup script curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/static/waf-workshop.yaml\u0026#39; --output waf-workshop.yaml curl \u0026#39;https://static.us-east-1.prod.workshops.aws/public/9bf792a6-2354-4106-9e62-7e75544c4ccc/static/deploy-workshop-own-account.sh\u0026#39; --output deploy-workshop-own-account.sh /2 3. Run the bootstrap script in the terminal\nsh deploy-workshop-own-account.sh If you meet the error “syntax error: \u0026ldquo;(\u0026rdquo; unexpected”, while running the script /3a Pleaze edit the first line of the script from “#!/bin/bash” to “#!/bin/bash” and save it. /3b and run the script with following command ./deploy-workshop-own-account.sh /3c\nIf you receive the notification “Failed to create/update the stack.” then use the command aws cloudformation describe-stack-events --stack-name waf-workshop or check the Stack page in CloudFormation console to troubleshoot: /3d1 /3d2 you will see that you have to adjust the MemorySize in the yaml file down to 3008.\n/3d3 After editting the yaml stack, run the script again. You will wait for 15 minutes then the task is deployed successfully. /3e\nPlease remember to delete all deployed resources (CloudFormation stack) after completing the workshop to avoid unnecessary charges.\nEvaluate This workshop will guide you through evaluating and improving the security posture of a web application. The environment you\u0026rsquo;ll be working in consists of a web application hosted on AWS, intentionally designed to be vulnerable. Your objective is to identify these vulnerabilities and implement security measures to mitigate them.\nHere\u0026rsquo;s an overview of the steps in this section:\nUnderstand the architecture: Understand the deployed architecture, and identify the underlying infrastructure components.\nAccess workshop progress dashboard: Explore the findings from automated scans of the web application, and your overall progress.\nRun manual scans: Perform manual security scans on the web application and identify remaining challenges.\nWorkshop Architecture The architecture of this workshop is shown as below: Go to the Outputs tab of the Stack page of CloudFormation page.\nThe first step is to find the website URL in the output named 1xWebApplicationURL. This sample website is already deployed in your AWS account for the workshop. Try opening it in a new tab. Your goal is to secure this website with AWS WAF.\nYou can access the AWS WAF console by using the link stored in the 2xWAFConsole output value. You will be using this console throughout the workshop, to apply protections to the web application you have just seen.\nOpen the link under 3xProgressDashboard in another tab. This dashboard tracks your progress throughout the workshop and updates automatically as you complete tasks.\nYou can also manually test your WAF protections using the link provided in the 4xTestProtections output. This will come in handy later in the workshop.\n5xTriggerRateLimiting will let you test the rate-limiting feature of AWS WAF later in the workshop.\nWebsite Scanning Environment and Tools This workshop provides two methods for testing AWS WAF rules that you will be implementing: automated and manual scanning. These scanners simulate common web attack vectors to help you identify and mitigate potential security risks, such as:\nSQL Injection (SQLi): Exploiting vulnerabilities to inject malicious code into database queries. Cross-site Scripting (XSS): Injecting malicious scripts into requests. Path Traversal: Accessing unauthorized files or directories on the web server. Sensitive Path Access: Attempting to access sensitive files or directories that should be restricted. Bot Activity: Identifying automated traffic and blocking malicious bots. API Misuse: Testing for improper usage of APIs. These tests are designed to provide common scenarios for evaluating your workshop progress. Remember that for production deployments, it\u0026rsquo;s crucial to conduct thorough security analysis and testing beyond the scope of this workshop.\nCongratulations! You have now learned about the architecture used in this workshop, how to find relevant stack outputs, and basics about the scans performed against your website. Continue to the next section to learn more about our automated scanning and how to trigger additional scans on demand.\nAutomated Scanning The Progress Dashboard provides a visual representation of your environment\u0026rsquo;s security posture. It displays the number of automated tests (e.g., SQL injection, XSS) that are currently passing for your WAF configuration. The link to access this dashboard can be found within the Outputs tab of the CloudFormation stack.\nNote that sometimes there may be a slight delay in data update. If you believe you have completed a task, but can\u0026rsquo;t see it on the dashboard, please wait a minute or two and check again.\nContinue to the next section to learn how to trigger manual scanning of web application protections.\nManual Scanning This section guides you through manually scanning your web application endpoint to assess the effectiveness of your WAF rules.\nRunning the Manual Scanner Go to the Stack page, and open the link under the 4xTestProtections output in a new tab. This will perform scans against your web application endpoint. The scanner script runs tests and reports back the following information, such as:\nRequest: The HTTP request command used (for example GET or POST) Result: The HTTP status code returned (for example 200 OK or 403 Forbidden)\nThe results are color-coded to help you quickly evaluate how your WAF rules are performing against their intended behavior. Ideally, all tests should return a green status code.\nBaseline Requests represent legitimate traffic that should not be blocked by your WAF rules. They should always return a 200 OK status code to ensure you haven\u0026rsquo;t unintentionally blocked valid users from accessing your application.\nReviewing the Scan Results After running the scanner script, analyze the results to answer these questions:\nDid any baseline tests get blocked? This indicates that your WAF rules might be too restrictive and need adjustment. Were the simulated malicious requests successfully blocked? This shows that your WAF rules are effectively protecting your application.\nSimulating Requests Yourself The scanner script leverages an AWS Lambda function to send test requests. You can replicate this process by sending similar requests from your own device using tools like curl on the command line.\nFor very basic tests, you can even send simple GET requests directly from your browser, potentially with query string parameters, and compare the responses you receive.\nThe scan results will likely reveal security vulnerabilities that need to be addressed. The next step, remediation, involves configuring an AWS WAF Web ACL to block these malicious requests. When AWS WAF successfully blocks a request based on your rules, it returns a 403 Forbidden status code or a custom error code you\u0026rsquo;ve defined.\nCongratulations! Now that you\u0026rsquo;re familiar with reviewing your progress, and testing applied protections, you\u0026rsquo;re well-prepared to move on to the Remediate section. There, you\u0026rsquo;ll explore strategies for implementing essential website protections with AWS WAF.\n"
},
{
	"uri": "//localhost:1313/3-remediate/3.2/",
	"title": "Protect Paths with Custom Rules",
	"tags": [],
	"description": "",
	"content": "Scenario The website has a directory /includes with files that should only be accessed by processes on the server (for example, header and footer for server-side rendering). However, all files in that directory can be accessed directly from the Internet which can lead to unintended information disclosure. Your task is to block direct access to files in the /includes directory.\nInstructions Create a custom AWS WAF rule that blocks all requests that begin with /includes. To prevent encoded requests from bypassing this rule, add a url decoding transformation before inspecting the request. After adding the custom rule to the Web ACL, test your protections using both manual and automated scans.\nProcedure Add a custom rule to the Web ACL: Navigate to the Rules tab of the Web ACL\nClick on Add Rules and select Add my own rules and rule groups\nRule details Rule type: Rule builder Name: path-block Type: Regular rule Statement If a request: Matches the statement Inspect: URI path Match type: Starts with string String to match: /includes Text transformation: URL decode regular rule Then Action: Block Click on Add rules on the bottom of the page regular rule Rule priority On the Set rule priority page, click on Save On the Rules tab, verify that the new custom rule is now listed regular rule You have completed adding the custom rule to block all requests to files in the /includes directory. You are now ready to test the protection. Evaluate protection effectiveness Follow the instructions to manually test protections from the Evaluate section to validate that Includes Modules test is passing and returning 403 Forbidden on that request. Review the progress dashboard and verify that automated scans for tests listed above are passing. Request to URL that has path /includes has been blocked\nCongratulations! You have successfully protected files in the /includes directory.\n"
},
{
	"uri": "//localhost:1313/5-optional/5.2/",
	"title": "Review the WAF Bot Dashboard",
	"tags": [],
	"description": "",
	"content": "Scenario If you have enabled AWS WAF Bot detection rule in an earlier exercise, your Bot Control dashboard should contain interesting data to analyze. Review the dashboard to analyze the bot activity on your site.\nInstructions In your WebACL, navigate to the Bot Control tab and review the data for the last 1 hour. Use the dashboard to get a quick insight into bot traffic on your site:\nWhat percentage of traffic is bots? How many bots were allowed through in the last 5 minutes? How many were blocked? What is the top category of bots? How many times did Zyborg bot attempt to reach your website in the last 5 minutes? There are no validation or verification steps in this exercise.\nProcedure Navigate to the Bot Control dashboard Navigate to the WebACL in the AWS WAF console\nSelect the Bot Control tab\nYou should see graphs similar to the screenshot Collect the metrics Check the data under All requests, in percentages\nThe screenshot below shows the section with a red rectangle\nClick on 1h in the top right of the dashboard\nThe chart will show data in 5-minute time intervals\nReview the number of requests allowed vs. blocked in within the last 5-minute interval\nThe next graph down shows the top categories of bots Collect Data on a Specific Bot In Browse bot activity dropdown, select Zyborg. The chart below will show data for the Zyborg bot (similar to this screenshot): Congratulations! You have successfully learned how to quickly analyze bot traffic in the Bot Control dashboard.\n"
},
{
	"uri": "//localhost:1313/3-remediate/3.3/",
	"title": "Gain visibility into Bot Traffic",
	"tags": [],
	"description": "",
	"content": "Scenario Your organization\u0026rsquo;s security team suspects that a large fraction of traffic on your website comes from various bots, both wanted (such as search engines) and unwanted bots (such as content scrapers). You need to get better data on the number and type of bots on your website. You should NOT block any bot traffic yet, at least not until you have had a chance to analyze all sources of traffic. Your organization also wants to scope the use of bot control for cost control and avoid applying unneeded protections on static objects (CSS stylesheets, JS files, etc.). Web developers have provided the following RegEx statement that matches all of the static content on the website:\n(?i)\\.(jpe?g|gif|png|svg|ico|css|js|woff2?)$\nInstructions You can use the AWS WAF Bot Control managed rule set to gain visibility into the bot traffic on your site. The Bot Control managed rule group provides options for common and targeted bots. The common bots option adds labels to self-identifying bots, verifies generally desirable bots, and detects high confidence bot signatures, targeted bots focuses on pervasive bots. For more details, please review documentation.\nCreate a regex pattern set that matches the static content. Setup the AWS WAF Bot Control rule group, use scope-down to exclude the static content (using the regex pattern), and ensure it\u0026rsquo;s only counting the traffic (override the default behavior). Note that the AWS WAF Bot Control rule group will still apply AWS WAF labels to bot requests. You will be able to use those labels to control requests on a granular level.\nAfter several minutes, you can navigate to the Bot Control tab to view additional details about bot traffic on your website.\nThis task does not have any protection validation steps. You will use labels applied by the AWS WAF Bot Control rule group in the next two tasks.\nProcedure Regex Pattern Set First, create a regex pattern set to filter out static content based on developer input.\nNavigate to Regex pattern sets and verify WAF console region selection is correct 2. there is a regex pattern already set up for you”. Click it for more detail\nRegular expressions: (?i).(jpe?g|gif|png|svg|ico|css|js|woff2?)$\nAWS WAF Bot Control rule set Next, enable AWS WAF Bot Control to gain visibility into bot traffic. Override rule actions to count to make sure you are not blocking any bot traffic. This will count the number of matches without blocking any traffic. Use scopedown statements to avoid scanning static objects that match the regex pattern.\nStart adding AWS WAF Bot Control Open the waf-workshop-webacl in the AWS WAF console and select the Traffic overview tab In the Data filters section, select the Bot Control tab\nIn the How it works section, click on Add AWS WAF Bot Control rule group\nBot Control configuration For Bot Control inspection level, choose Common as the inspection level In Bot Control Rules, set Override all rule actions to Count Scope-down statement Choose Only inspect requests that match a scope-down statement\nScope-down statement: enabled (checked)\nIf a request: doesn\u0026rsquo;t match the statement (NOT)\nInspect: URI path\nMatch type: Matches pattern from regex patttern set\nRegex pattern set: static-content (the regex pattern set created above)\nText transformation: None\nSet priority and review rules On the Set rule priority page, click on Save (no changes needed) Verify that Bot Control rule set is now listed on Rules tab in the Web ACL Within a few minutes you will gain additional metrics on the Bot Control tab Proceed to the next task to take advantage of the added visibility provided by AWS WAF Bot Control Congratulations! You have successfully integrated AWS WAF Bot Control which will start applying labels to bot requests. You will use those labels in the following tasks.\n"
},
{
	"uri": "//localhost:1313/4-monitor/4.3/",
	"title": "Insert Custom HTTP Request Header",
	"tags": [],
	"description": "",
	"content": "Scenario You can use the Request Header Insertion feature to help validate that requests made to your application were evaluated by AWS WAF. You can configure your application to only allow requests that contain the specified custom headers. You can also insert headers so your application can process the request differently based on the presence of the header, or simply log the header in your application logs for reporting and analytics.\nThere are no verification steps in this exercise.\nInstructions Use the request header insertion feature of AWS WAF. Verify the presence of the inserted headers with Amazon CloudWatch Logs.\nProcedure Insert Custom Header: Navigate to the Rules tab of the Web ACL\nClick on Add Rules and select Add my own rules and rule groups\nRule details\nRule type: Rule builder Rule: header-insert, regular rule Statement\nIf a request: Matches the statement Inspect: URI path Match type: Starts with string String to match: /api Then\nAction: Allow Custom request - optional: Key/Value: request-source, TestBotCanary Click on Add rule on the bottom of the page Rule priority\nOn the Set rule priority page, click on Save On the Rules tab, verify that the new custom rule is now listed You have completed adding the custom rule insert the custom header. Congratulations! You have successfully configured custom header insertion.\n"
},
{
	"uri": "//localhost:1313/5-optional/5.3/",
	"title": "Protect a Web Form Using CAPTCHA",
	"tags": [],
	"description": "",
	"content": "Scenario The sample website deployed as part of this workshop contains a Quiz. Please add AWS WAF CAPTCHA protection to the Quiz page to ensure that answers are coming from legitimate users.\nInstructions Use the AWS WAF CAPTCHA to ensure that only humans can access the form hosted at /quiz. Validate manually that the rule is working. Solve the presented CAPTCHA puzzle, and solve the AWS WAF Quiz.\nProcedure Add a custom rule to the Web ACL: Navigate to the Rules tab of the Web ACL\nClick on Add Rules and select Add my own rules and rule groups\nRule details\nRule type: Rule builder Name: quiz-captcha Type: Regular rule Statement\nIf a request: Matches the statement Inspect: URI path Match type: Exactly matches string String to match: /quiz Text transformation: None Then\nAction: CAPTCHA Check Set a custom immunity time for this rule Immunity time: 900 seconds Click on Add rules on the bottom of the page Rule priority\nOn the Set rule priority page, click on Save On the Rules tab, verify that the new custom rule is now listed (it may be on the 2nd page of rules) You have completed adding the custom rule with CAPTCHA that allows access only to humans. You are now ready to test the protection. Evaluate protection effectiveness Navigate to the Sample web application.\nOpen the AWS WAF Quiz using the link in the top right corner.\nYou will be then shown a page asking you to confirm you are human. Solve the puzzle that is shown to you. You will be briefly shown a Success message, and you will be redirected to the Quiz page.\nSolve the Quiz and click on the Submit button. You will be shown a pop-up message with the Quiz result.\nCongratulations! You have successfully implemented AWS WAF CAPTCHA protection for a web form.\n"
},
{
	"uri": "//localhost:1313/3-remediate/",
	"title": "Remediate",
	"tags": [],
	"description": "",
	"content": "Your organization wants to use AWS WAF as part of a layered approach to defending its key web application. Please follow the activities to apply different types of protection using AWS WAF.\nIn this module, you will deploy the following tasks:\nApply Foundational Protection with AWS Managed Rules Protect Paths with Custom Rules Gain visibility into Bot Traffic Block Bad Bots with Custom Rules Rate Limit Bot Traffic and Send Custom Responses Protect APIs with Request Body Parsing "
},
{
	"uri": "//localhost:1313/3-remediate/3.4/",
	"title": "Block Bad Bots with Custom Rules",
	"tags": [],
	"description": "",
	"content": "Scenario In the previous activity, you have enabled AWS WAF Bot Control to collect data on bot activity. After analyzing the bot activity, you have determined that \u0026ldquo;zyborg\u0026rdquo; bots are causing excessive load on web servers, and are not allowed bots in your app. You need to block all requests from zyborg bots.\nInstructions The AWS WAF Bot Control rule group adds this label to requests from zyborg bots: awswaf:managed:aws:bot-control:bot:name:zyborg. Create a WAF rule with one statement that blocks all requests with this label.\nAfter implementing the new WAF rule to block zyborg bot requests, test your new rule using both manual and automated scans.\nProcedure Add a custom rule to the Web ACL Navigate to the Web ACL and its list of rules. Click on \u0026ldquo;Add rules\u0026rdquo;, select \u0026ldquo;Add my own rules and rule groups\u0026rdquo;.\nRule details Rule type: Rule builder Name: zyborg-block Type: Regular rule If a request: matches the statement Statement Inspect: Has a label Match scope: Label Match key: awswaf:managed:aws:bot-control:bot:name:zyborg Then Action: Block\nClick on Add rules on the bottom of the page\nRule priority On the Set rule priority page, ensure that the new zyborg-block rule appears BELOW the AWS WAF Bot managed rule (\u0026ldquo;AWS-AWSManagedRulesBotControlRuleSet\u0026rdquo;) and Save On the Rules tab, verify that the new custom rule is now listed 3. You have completed adding the custom rule to block the zyborg bot. You are now ready to test the protection.\nEvaluate protection effectiveness Use manual scanning from the Evaluate section. Validate that Bad Bot test is passing and returning 403 Forbidden on that request. Review the workshop dashboard and verify that Bad Bot automated scan is passing (green). Refer to the Evaluate section for instructions. Congratulations! You have successfully protected your website against the zyborg bot.\n"
},
{
	"uri": "//localhost:1313/4-monitor/",
	"title": "Monitor",
	"tags": [],
	"description": "",
	"content": "In this section, you will learn how to monitor AWS WAF with CloudWatch and how to investigate its logs. AWS WAF records CloudWatch metrics for each WebACL and each WAF rule within the WebACL. In addition, AWS WAF in this workshop is preconfigured for real-time logging through Amazon Kinesis Firehose to Amazon S3. You will get a chance to investigate those logs by querying them through Amazon Athena.\nYou can check the configuration in the tag “Logging and metrics” tab in the Web ACLs page You can also check the data schema in Glue\nThe table schema\nHTTP request struct structure:\n{ \u0026#34;httprequest\u0026#34;: { \u0026#34;clientip\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;country\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;headers\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;value\u0026#34;: \u0026#34;string\u0026#34; } ], \u0026#34;uri\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;args\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;httpversion\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;httpmethod\u0026#34;: \u0026#34;string\u0026#34;, \u0026#34;requestid\u0026#34;: \u0026#34;string\u0026#34; } } Content Investigate AWS WAF Logs Block Mystery Test Insert Custom HTTP Request Header "
},
{
	"uri": "//localhost:1313/5-optional/",
	"title": "Optional",
	"tags": [],
	"description": "",
	"content": "Exercises in this section are optional and available if you have sufficient time to complete the core exercises.\nContent Create a CloudWatch Alarm for an AWS WAF Metric Review the WAF Bot Dashboard Protect a Web Form Using CAPTCHA "
},
{
	"uri": "//localhost:1313/3-remediate/3.5/",
	"title": "Rate Limit Bot Traffic and Send Custom Responses",
	"tags": [],
	"description": "",
	"content": "Scenario Upon further analysis, the website management team identified one of your partners uses a PHP crawler bot and it occasionally creates spikes of traffic, slowing down the website for other users. The partner has been notified to work on reducing those spikes. While you await their fix, you need to rate-limit their automated traffic to avoid any further impact on the website performance. The rate limit should be 100 requests per 5 minutes. After the limit is reached, the response should follow RFC 6585 by returning http error code 429 (too many requests) with a Retry-After header indicating that requester should wait 900 seconds (15 minutes) before making a new request.\nTo test your rule, go to the Stack Outputs tab in CloudFormation page, and use the link called Trigger Rate Limiting. That will generate excessive requests against your site, simulating automated traffic. Once the rate-limiting rule is triggered, responses should include the correct HTTP response status code and the correct header.\nInstructions Create a rate-limiting rule that allows up to 100 requests in 5 minutes, matching the label awswaf:managed:aws:bot-control:bot:name:phpcrawl. This rule should block with a custom response, response code 429. Insert a custom header key Retry-After and value 900. Create a custom response body that contains a message explaining the reason for the block: \u0026ldquo;Only 100 requests in a 5-minute period are allowed\u0026rdquo;.\nProcedure Verification steps for this rate-limiting differ from previous tasks. Please review the verification steps carefully.\nAdd a custom rule to the Web ACL: Navigate to the Rules tab of the Web ACL\nClick on Add Rules and select Add my own rules and rule groups\nRule details Rule type: Rule builder Name: phpcrawl-rate-limiter Type: Rate-based rule Request rate details Rate limit: 100 in Evaluation window 5 minutes Request aggregation: Source IP address Scope of inspection and rate limiting: Only consider requests that match the criteria in a rule statement Count only the requests that match the following statement If a request: matches the statement Inspect: Has a label Match Key: awswaf:managed:aws:bot-control:bot:name:phpcrawl Then Action: Block\nCustom response: Enable (checked)\nResponse Code: 429\nClick on Add new custom header\nResponse Headers:\nKey: Retry-After Value: 900 Click on \u0026ldquo;Add rule\u0026rdquo; Rule priority On the Set rule priority page, ensure that the new phpcrawl-rate-limiter rule appears in the order BELOW the AWS WAF Bot Control managed rule (AWS-AWSManagedRulesBotControlRuleSet)\nClick on Save\nOn the Rules tab, verify that the new custom rule is now listed\nYou have completed creating the custom rule to rate-limit PHP crawler requests. Please note the unique steps below to validate this rule.\nEvaluate protection effectiveness Use the following manual method to validate the rate-limiting rule:\nGo to the Stack Outputs tab in CloudFormation, and use the link called Trigger Rate Limiting\nThe script will simulate an excessive number of requests to your test site while simulating the PHPCrawler bot\nInitially, requests will result in 200 OK responses\nWhen the rate-limiting rule is triggered, requests will be blocked and result in 429 Too Many Requests responses\nConfirm that the Retry-After header is included in responses\nCongratulations! You have successfully rate-limited the PHPCrawler bot and prevented excessive requests to your website.\n"
},
{
	"uri": "//localhost:1313/6-clean-up/",
	"title": "Clean Up",
	"tags": [],
	"description": "",
	"content": " Empty all S3 buckets related to the workshop.\nGo to the Stack page.\nDelete the stack that you have deployed in the preparation section. "
},
{
	"uri": "//localhost:1313/3-remediate/3.6/",
	"title": "Protect APIs with Request Body Parsing",
	"tags": [],
	"description": "",
	"content": "Scenario The web store has built an API to help with integrations with their partners. This API is available to retrieve a list of up to 100 products at a time. The development team is working on adding layers of security in the API code. Your task is to add WAF protection that will only allow valid JSON requests and limit the number of listed products to a number between 1 and 100.\nHere is a sample valid JSON used to invoke this API:\n{ \u0026#34;numrecords\u0026#34;:\u0026#34;25\u0026#34; } Only requests with the valid JSON formatting and the valid value for numrecords (1-100 inclusive) should be allowed. The API is available at the path /api/listproducts.php. For API requests that do not pass all of the validation steps, the WAF rule should return a 400 http response code. According to RFC 2616, the 400 http response code indicates that the request could not be understood and the client should not repeat the request without modifications.\nInstructions First, create a regex pattern set that matches the valid value (1-100) for numrecords. Here is a regular expression that you can use:\n^0*(?:[1-9][0-9]?|100)$ Then, create a WAF rule with two statements. One statement should match the URI path of the API (/api/listproducts.php). Another statement needs to inspect the JSON body of incoming API requests, and validate that the JSON syntax is valid. It should also validate the value of \u0026ldquo;numrecords\u0026rdquo; using the regex pattern set. If the URI path matches, but the syntax is not correct, then the WAF rule should return a custom response using a 400 http response code.\nAfter implementing the new WAF rule to guard against API abuse, test your protection using both manual and automated scans. For manual scans, click on the link in the event outputs. For automated scans, check the Progress Dashboard in Event Outputs .\nProcedure The procedure below is lengthier and more complex than in previous tasks. Please pay special attention to the steps listed below.\nRegex Pattern Set Create a regex pattern set that matches numbers 1-100:\nNavigate to Regex pattern sets and verify the WAF console region selection is correct\nClick on Create regex pattern set\nRegex pattern set name: number-1-to-100\nRegular expressions: ^0(?:[1-9][0-9]?|100)$*\nClick on Create regex pattern\nWAF Rule Create a regular WAF rule that matches all the statements:\nNavigate to the Rules tab of the Web ACL\nClick on Add Rules and select Add my own rules and rule groups\nRule details Rule name: api-protection Type: Regular rule If a request: Matches all the statements (AND) Statement #1 Inspect: URI path Match type: Exactly matches string String to match: /api/listproducts.php Text transformation: none Statement #2 Negate statement results (checked) Inspect: Body Content type: JSON JSON match scope: Values How AWS WAF should handle the request if the JSON in the request body is invalid: No match Match the specific JSON element with the regex statement:\nContent to inspect: Only included elements Included elements: /numrecords Match type: Matches pattern from regex pattern set Regex pattern set: (previosly created pattern set matching numbers 1-100) Text transformation: None Oversize handling: Continue Then Action: Block Custom response: Enable (checked) Response Code: 400 Click on Add rule Rule priority On the Set rule priority page, click on Save 2. On the Rules tab, verify that the new custom rule is now listed\nYou have completed adding the custom rule that checks JSON values in the body of the request and protects your API against incorrect usage. You are now ready to test the protection. Evaluate protection effectiveness Use both manual and automated testing methods to evaluate the effectiveness of the new rule in your ACL:\nUse manual scanning from the Evaluate section. Validate that API Misuse test is passing. 2. Review the workshop dashboard and verify that the API Misuse automated scan is passing (the test should be color-coded green). Refer to the Evaluate section for instructions.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]